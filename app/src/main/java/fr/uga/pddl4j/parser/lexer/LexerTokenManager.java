/* LexerTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. LexerTokenManager.java */
package fr.uga.pddl4j.parser.lexer;
import fr.uga.pddl4j.parser.Connective;
import fr.uga.pddl4j.parser.DerivedPredicate;
import fr.uga.pddl4j.parser.ErrorManager;
import fr.uga.pddl4j.parser.Parser;
import fr.uga.pddl4j.parser.Exp;
import fr.uga.pddl4j.parser.Domain;
import fr.uga.pddl4j.parser.Problem;
import fr.uga.pddl4j.parser.NamedTypedList;
import fr.uga.pddl4j.parser.DomainAxiom;
import fr.uga.pddl4j.parser.DomainRuleImplication;
import fr.uga.pddl4j.parser.Op;
import fr.uga.pddl4j.parser.RequireKey;
import fr.uga.pddl4j.parser.Symbol;
import fr.uga.pddl4j.parser.TypedSymbol;
import kb.common.datastructure.solutionpath.Plan;
                                        //Mes
import kb.common.datastructure.solutionpath.PlanAction;
                                                //Mes

import java.io.FileInputStream;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

/** Token Manager. */
@SuppressWarnings("unused")public class LexerTokenManager implements LexerConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x60000000000000L) != 0L)
         {
            jjmatchedKind = 128;
            return 36;
         }
         if ((active0 & 0x120L) != 0L || (active1 & 0x40000L) != 0L)
            return 2;
         if ((active0 & 0x18000L) != 0L || (active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 128;
            return 32;
         }
         if ((active1 & 0x400000000000000L) != 0L)
            return 43;
         if ((active0 & 0xfffefef3ffbc0000L) != 0L || (active1 & 0xfffL) != 0L)
            return 18;
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 128;
            return 40;
         }
         if ((active0 & 0x10c00420000L) != 0L || (active1 & 0x339ffffebde00000L) != 0L)
         {
            jjmatchedKind = 128;
            return 46;
         }
         return -1;
      case 1:
         if ((active1 & 0x1041004000000L) != 0L)
            return 46;
         if ((active0 & 0x10c00430000L) != 0L || (active1 & 0x33fefbeef9e00000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 1;
            }
            return 46;
         }
         if ((active0 & 0x8000L) != 0L || (active1 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 1;
            }
            return 31;
         }
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active1 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 1;
            }
            return 44;
         }
         if ((active0 & 0x4002b000000000L) != 0L || (active1 & 0x30cL) != 0L)
            return 17;
         return -1;
      case 2:
         if ((active1 & 0x14000028000000L) != 0L)
            return 46;
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x8L) != 0L)
            return 16;
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 2;
            return 44;
         }
         if ((active0 & 0x10c00438000L) != 0L || (active1 & 0x33eaffeed3e00000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 2;
            return 46;
         }
         return -1;
      case 3:
         if ((active0 & 0x800020000L) != 0L || (active1 & 0x8000000000000L) != 0L)
            return 46;
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 3;
            return 44;
         }
         if ((active0 & 0x10400418000L) != 0L || (active1 & 0x33e2ffeed3e00000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 3;
            return 46;
         }
         return -1;
      case 4:
         if ((active1 & 0x2004210000000L) != 0L)
            return 46;
         if ((active0 & 0x10400418000L) != 0L || (active1 & 0x33e0ffacc3e00000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 4;
            }
            return 46;
         }
         if ((active1 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 4;
            }
            return 44;
         }
         return -1;
      case 5:
         if ((active0 & 0x418000L) != 0L || (active1 & 0x30002288c0200000L) != 0L)
            return 46;
         if ((active1 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 5;
            }
            return 44;
         }
         if ((active0 & 0x10400000000L) != 0L || (active1 & 0x3e0dd2403c00000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 5;
            }
            return 46;
         }
         return -1;
      case 6:
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x2000000000L) != 0L)
            return 46;
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x3e0fd0403c00000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 6;
            }
            return 46;
         }
         if ((active1 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 6;
            }
            return 44;
         }
         return -1;
      case 7:
         if ((active1 & 0x180190403400000L) != 0L)
            return 46;
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x260e40000800000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 7;
            }
            return 46;
         }
         if ((active1 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 7;
            }
            return 44;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x260fc0000800000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 8;
            }
            return 46;
         }
         if ((active1 & 0x400000000000000L) != 0L)
            return 44;
         return -1;
      case 9:
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x60800000800000L) != 0L)
            return 46;
         if ((active1 & 0x2007c0000000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 9;
            }
            return 46;
         }
         return -1;
      case 10:
         if ((active1 & 0x200400000000000L) != 0L)
            return 46;
         if ((active1 & 0x3c0000000000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 10;
            return 46;
         }
         return -1;
      case 11:
         if ((active1 & 0x40000000000L) != 0L)
            return 46;
         if ((active1 & 0x380000000000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 11;
            return 46;
         }
         return -1;
      case 12:
         if ((active1 & 0x200000000000L) != 0L)
            return 46;
         if ((active1 & 0x180000000000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 12;
            return 46;
         }
         return -1;
      case 13:
         if ((active1 & 0x80000000000L) != 0L)
            return 46;
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 13;
            return 46;
         }
         return -1;
      case 14:
         if ((active1 & 0x100000000000L) != 0L)
            return 46;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L);
      case 40:
         return jjStopAtPos(0, 13);
      case 41:
         return jjStopAtPos(0, 14);
      case 42:
         return jjStopAtPos(0, 81);
      case 43:
         return jjStopAtPos(0, 83);
      case 45:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 47:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x120L, 0x0L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0xfffefef3ffbc0000L, 0xfffL);
      case 59:
         return jjStopAtPos(0, 6);
      case 60:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 61:
         return jjStopAtPos(0, 80);
      case 62:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 63:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x11248808200000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x18000L, 0x2000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x4000080000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc00000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200001011000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000020000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2008000204000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10400020000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2192400c00000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60000000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x24000000000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L);
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 61:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000042000000L, active1, 0x80000000000802L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x2000000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x800004008800000L, active1, 0x800c000c0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4002b000000000L, active1, 0x40000000000030cL);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000200008000L, active1, 0x402000000L);
      case 70:
      case 102:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 100, 46);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000020000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x1L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0x4000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200010400000L, active1, 0x100020000000400L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0x10208000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800000000000L, active1, 0x10000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4020000000000000L, active1, 0x4000209000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8002100000010000L, active1, 0x60d90060000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0181040000L, active1, 0x20L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 90, 46);
         return jjMoveStringLiteralDfa2_0(active0, 0x10400100000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x200000000200000L);
      case 84:
      case 116:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000200000L, active1, 0x2040000000010L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x1000002000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0x8000000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200040000000000L);
      case 62:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 96);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000084020000L, active1, 0x2000000c00000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000100000000000L, active1, 0x2000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000040000000L, active1, 0x3000000L);
      case 68:
      case 100:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 91, 46);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 114, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20808c00100000L, active1, 0x8000200000008L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x200008000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x4080000010L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L);
      case 76:
      case 108:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 116, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000080000040000L, active1, 0xc00000000800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x10010000L, active1, 0x1000190000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x200200000000000L, active1, 0x100000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800434008880000L, active1, 0x1c1L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x10000000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x400000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40101000000L, active1, 0x40000020L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200400L);
      case 84:
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000400000L, active1, 0x60020800000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4400003020000000L, active1, 0x400000000000204L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x208000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000002000000L, active1, 0x80000000000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400480000050000L, active1, 0x60208040000001L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0x1000000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0xc00000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x101000000L, active1, 0x2000190000000020L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x20000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x304200002008000L, active1, 0x180000800200000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000100000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(3, 65);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4010c00800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000020000000000L, active1, 0x40000000110L);
      case 78:
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 46);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x800004028800000L, active1, 0xc0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x200000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000010200000L, active1, 0x2000000400L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x800b084000000L, active1, 0x40200000300020cL);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x80000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1002800040000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2080000000000000L, active1, 0x400000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0023080000000L, active1, 0x400000000000304L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x120000000L, active1, 0x2000000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x800004001000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0xe000100600600000L, active1, 0x1000000403c00410L);
      case 70:
      case 102:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x101a008040010000L, active1, 0x200020000000008L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10010000000L, active1, 0x60002040000001L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x180000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(4, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x400080000008000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x40800000800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(4, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000800000L, active1, 0x40L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(4, 45);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 113, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0x190080000080L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(4, 19);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x208000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x60000000c00001L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x802003000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000100200000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000010L);
      case 69:
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x200010008000000L, active1, 0x20L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800824011100000L, active1, 0x180190000000180L);
      case 76:
      case 108:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x80040000000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 46);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 46);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 46);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 105, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x2010000000000000L, active1, 0x400000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1002000140000000L, active1, 0x200000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 46);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 124, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000400000000L, active1, 0x400L);
      case 83:
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(5, 21);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 46);
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x240000000000L);
      case 84:
      case 116:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 125, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x520003020800000L, active1, 0x400000000000244L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x88000000000L, active1, 0x8L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000010L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000800000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(6, 47);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0x40000400000400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x100048490000000L, active1, 0x8L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000000L);
      case 71:
      case 103:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(6, 52);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x44a0003020000000L, active1, 0x400000000000204L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000000L);
      case 77:
      case 109:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 46);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x190000000000L);
      case 78:
      case 110:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 101, 46);
         return jjMoveStringLiteralDfa7_0(active0, 0x1042000100000000L, active1, 0x180L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000100000L, active1, 0x60L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(6, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x3000000L);
      case 84:
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(6, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0xa800104000000000L, active1, 0x20040000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000400001L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x180000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x9000000000000000L, active1, 0x40000000100L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000001000000L, active1, 0x200000000000040L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4040000000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0x8L);
      case 69:
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 88, 46);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 89, 46);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 98, 46);
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 119, 46);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 120, 46);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0x180000000c20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800004000000000L, active1, 0x20000000000010L);
      case 77:
      case 109:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(7, 42);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000400800000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x2020000000L, active1, 0x440000000800200L);
      case 80:
      case 112:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 46);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0x400000000000L);
      case 83:
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(7, 28);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(7, 44);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(7, 61);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(7, 27);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000080000000L, active1, 0x800000000001L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x20001000000000L, active1, 0x4L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0x180000000008L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0x100L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000400000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x20001080000000L, active1, 0x800000000004L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000100000000L, active1, 0x600000000441L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(8, 49);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L, active1, 0x20000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 122, 44);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0x230L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800004000000000L, active1, 0x40000000000L);
      case 83:
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(8, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000000080L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x140000001800000L, active1, 0x200000000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L);
      case 89:
      case 121:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(8, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x20001000000000L, active1, 0x284L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20L);
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 34, 46);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 117, 46);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000001100000L, active1, 0x200000000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x140000000000000L, active1, 0x10L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x8200000000000000L, active1, 0x1L);
      case 78:
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 87, 46);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0x440000000040L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x808L);
      case 82:
      case 114:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 111, 46);
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(9, 23);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(9, 29);
         break;
      case 84:
      case 116:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 118, 46);
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0x200000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x900001000000000L, active1, 0x404L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000000000L);
      case 68:
      case 100:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 121, 46);
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000000a0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000000000L);
      case 71:
      case 103:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 110, 46);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L, active1, 0x301L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8L);
      case 83:
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(10, 24);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(10, 31);
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x50L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L, active1, 0x4L);
      case 69:
      case 101:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 106, 46);
         return jjMoveStringLiteralDfa12_0(active0, 0x8040000000000000L, active1, 0x8L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000000080L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000000010L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x900000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L, active1, 0x900L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(11, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(11, 70);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000100000L, active1, 0x80000000001L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0x940000000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x4020000000000000L, active1, 0x80000000200L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100L);
      case 78:
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(12, 32);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 109, 46);
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000000L, active1, 0x800L);
      case 83:
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(12, 20);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(12, 60);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(13, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(13, 75);
         return jjMoveStringLiteralDfa14_0(active0, 0xa00000000000000L, active1, 0x81L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L, active1, 0xcL);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x140000000000000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200L);
      case 82:
      case 114:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 107, 46);
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000000L, active1, 0x100000000000L);
      case 83:
      case 115:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(13, 72);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x10L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000000000L, active1, 0x88L);
      case 69:
      case 101:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 108, 46);
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x20001000000000L, active1, 0x4L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x140000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(14, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(14, 64);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x208L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x140000000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x10L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000000L, active1, 0x4L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(15, 62);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x140000000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x10L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x200L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(16, 66);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(16, 71);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x8L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000000000000L, active1, 0x200L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x140000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1);
      return 18;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x200000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x140000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(18, 67);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x820000000000000L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1);
      return 19;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa20_0(active0, 0x140000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x420000000000000L, active1, 0x200L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x10L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(19, 59);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(18, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1);
      return 20;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x10L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x200L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x340000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x20000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(19, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1);
      return 21;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x400000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x10L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa22_0(active0, 0x20000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0x200000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(21, 73);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0x140000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, active1);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(20, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, active1);
      return 22;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0x140000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0x200000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0x400000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(22, 53);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(22, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, active1);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(21, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa24_0(active0, 0x400000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0x140000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(23, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa25_0(active0, 0x140000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(24, 58);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(25, 54);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(25, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 50;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 129)
                        kind = 129;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 36:
               case 46:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  { jjCheckNAdd(46); }
                  break;
               case 32:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  { jjCheckNAdd(46); }
                  break;
               case 31:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  { jjCheckNAdd(46); }
                  break;
               case 40:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  { jjCheckNAdd(46); }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 19:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 42:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 44:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 48:
                  if (curChar != 46)
                     break;
                  if (kind > 129)
                     kind = 129;
                  { jjCheckNAdd(49); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  { jjCheckNAdd(49); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 128)
                        kind = 128;
                     { jjCheckNAdd(46); }
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 128)
                        kind = 128;
                     { jjCheckNAdd(46); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 128)
                        kind = 128;
                     { jjCheckNAdd(46); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 128)
                        kind = 128;
                     { jjCheckNAdd(46); }
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 128)
                        kind = 128;
                     { jjCheckNAdd(46); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if ((0x2000000020L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 5:
               case 20:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(4); }
                  break;
               case 6:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 21:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 33:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L && kind > 126)
                     kind = 126;
                  break;
               case 35:
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(34); }
                  break;
               case 37:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(34); }
                  break;
               case 39:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 41:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 43:
               case 44:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  { jjCheckNAdd(44); }
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  { jjCheckNAdd(46); }
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  { jjCheckNAdd(46); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 50 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\50", "\51", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\76", "\74", "\76\75", "\74\75", "\75", 
"\52", "\57", "\53", "\55", null, null, null, null, null, null, null, null, null, 
null, null, "\55\55\76", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                         input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public LexerTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public LexerTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
	
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 50; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( SimpleCharStream stream, int lexState)
  {
  
    ReInit( stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe001L, 0xffffffffffffffffL, 0x3L, 
};
static final long[] jjtoSkip = {
   0xe1eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe00L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11e0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[50];
    private final int[] jjstateSet = new int[2 * 50];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected int curChar;
}
